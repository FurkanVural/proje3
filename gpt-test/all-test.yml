apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: test
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
#  clusterIP: 
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 5Gi  # Capacity matches the PVC's requested storage
  volumeMode: Filesystem  # Filesystem is typically used
  accessModes:
    - ReadWriteOnce  # Matches the PVC's access mode
  persistentVolumeReclaimPolicy: Retain  # Retain or Delete (matches your preference)
  storageClassName: standard  # Name of the StorageClass to use (matches your PVC)
  hostPath:
    path: /var/lib/mysql  # Replace with the actual host path

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: test
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi  
  storageClassName: standard

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: test
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      tolerations:
       - key: "tier"
         operator: "Equal"
         value: "production"
         effect: "NoSchedule"
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: wordpress
              topologyKey: kubernetes.io/hostname
      containers:
        - name: mysql-container
          image: mysql:5.6
          envFrom:
            - secretRef:
                name: mysql-secret
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
          resources:
            requests:
              memory: "512Mi"
              cpu: "0.5"
            limits:
              memory: "1Gi"
              cpu: "1"
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
  namespace: test
spec:
  selector:
    app: wordpress
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-pv
spec:
  capacity:
    storage: 5Gi  # Capacity matches the WordPress PVC's requested storage
  volumeMode: Filesystem  # Filesystem is typically used
  accessModes:
    - ReadWriteOnce  # Matches the WordPress PVC's access mode
  persistentVolumeReclaimPolicy: Retain  # Retain or Delete (matches your preference)
  storageClassName: standard  # Name of the StorageClass to use (matches WordPress PVC)
  hostPath:
    path: /var/www
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
  namespace: test
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi  # Requested storage matches the WordPress PV's capacity
  storageClassName: standard

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-deployment
  namespace: test
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      tolerations:
       - key: "tier"
         operator: "Equal"
         value: "production"
         effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: tier
                    operator: In
                    values:
                      - production
      #affinity:
        #podAffinity:
          #requiredDuringSchedulingIgnoredDuringExecution:
          #  - labelSelector:
         #       matchLabels:
         #         app: mysql
         #     topologyKey: kubernetes.io/hostname
      containers:
        - name: wordpress-container
          image: wordpress:latest
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql-service
            - name: WORDPRESS_DB_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_USER
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_PASSWORD
          ports:
            - containerPort: 80
          volumeMounts:
            - name: wordpress-persistent-storage
              mountPath: /var/www/html
          resources:
            requests:
              memory: "512Mi"
              cpu: "0.5"
            limits:
              memory: "1Gi"
              cpu: "1"
      volumes:
        - name: wordpress-persistent-storage
          persistentVolumeClaim:
            claimName: wordpress-pv-claim

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wordpress-ingress
  namespace: test
spec:
  rules:
    - host: fvo123.com
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: wordpress-service
                port:
                  number: 80